1. Overview
The AI Tutor Prototype project is a React-based application designed to facilitate educators and learners in uploading learning materials, configuring tests, taking tests, and viewing graded results. The project utilizes Vite as the build tool for rapid development and efficient bundling. Learners can view their test results, including detailed feedback and scores provided by their tutor.
The latest updates include improvements in UI alignment using Material UI components, fixing issues with the test question rendering, and handling complex question types like Matching.

2. Current Directory Structure
perl
Copy code
AITUTORPROTOPROJECT/
│
├── node_modules/               # Installed npm packages
├── public/                     # Public assets accessible at the root URL
├── src/                        # Source files for the React application
│   ├── assets/                 # Asset files (images, icons, etc.)
│   ├── components/             # Reusable React components
│   │   ├── ConfigureTest.jsx   # Component for configuring tests
│   │   ├── Home.jsx            # New Home component
│   │   ├── Question.jsx        # Component for rendering different question types
│   │   ├── TestDisplay.jsx     # Component for displaying test questions
│   │   ├── TestResult.jsx      # Component for displaying graded test results
│   │   ├── UploadMaterial.jsx  # Component for uploading learning materials
│   ├── App.css                 # Styling for the App component
│   ├── App.jsx                 # Main App component with routing
│   ├── index.css               # Global styling
│   ├── main.jsx                # Entry point for the React application
├── gradedTestData.json         # Mock data for graded test results
├── testData.json               # Mock data for test questions (20 questions with various types)
├── .gitignore                  # Specifies intentionally untracked files to ignore
├── eslint.config.js            # ESLint configuration for code linting
├── index.html                  # HTML template for the application
├── package-lock.json           # Exact versions of installed packages
├── package.json                # Project metadata and dependencies
├── README.md                   # Project documentation
└── vite.config.js              # Vite configuration file


3. Implemented Code and Functionality
a. Main Application Setup (App.jsx):
jsx
Copy code
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';
import UploadMaterial from './components/UploadMaterial';
import ConfigureTest from './components/ConfigureTest';
import TestDisplay from './components/TestDisplay';
import TestResult from './components/TestResult';
import Home from './components/Home';
import './App.css';

function App() {
  return (
    <Router>
      <div className="App">
        <nav>
          <ul>
            <li><Link to="/">Home</Link></li>
            <li><Link to="/upload">Upload Material</Link></li>
            <li><Link to="/configure">Configure Test</Link></li>
            <li><Link to="/test">Take Test</Link></li>
          </ul>
        </nav>
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/upload" element={<UploadMaterial />} />
          <Route path="/configure" element={<ConfigureTest />} />
          <Route path="/test" element={<TestDisplay />} />
          <Route path="/result" element={<TestResult />} />
        </Routes>
      </div>
    </Router>
  );
}

export default App;

b. Components:
UploadMaterial.jsx:
jsx
Copy code
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Typography, Button, Box } from '@mui/material';
import UploadFileIcon from '@mui/icons-material/UploadFile';

function UploadMaterial() {
  const [file, setFile] = useState(null);
  const navigate = useNavigate();

  const handleFileUpload = (e) => {
    const selectedFile = e.target.files[0];
    if (selectedFile) {
      setFile(selectedFile);
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (file) {
      navigate('/configure');
    } else {
      alert('Please upload a file');
    }
  };

  return (
    <Box sx={{ maxWidth: 600, mx: 'auto', mt: 4, textAlign: 'center' }}>
      <Typography variant="h4" gutterBottom>Upload Learning Material</Typography>
      <form onSubmit={handleSubmit}>
        <Box display="flex" justifyContent="center" alignItems="center" mb={2} gap={2}>
          <Button variant="contained" component="label" startIcon={<UploadFileIcon />}>
            Choose File
            <input type="file" hidden onChange={handleFileUpload} />
          </Button>
          <Button type="submit" variant="contained" color="primary" disabled={!file}>
            Upload
          </Button>
        </Box>
        {file && <Typography variant="body1" sx={{ mt: 2 }}>{file.name}</Typography>}
      </form>
    </Box>
  );
}

export default UploadMaterial;

ConfigureTest.jsx:
jsx
Copy code
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Typography, TextField, Button, Box } from '@mui/material';

function ConfigureTest() {
  const [testTitle, setTestTitle] = useState('');
  const [numQuestions, setNumQuestions] = useState(5);
  const navigate = useNavigate();

  const handleSubmit = (e) => {
    e.preventDefault();
    navigate('/test', { state: { testTitle, numQuestions } });
  };

  return (
    <Box>
      <Typography variant="h4" gutterBottom>Configure Test</Typography>
      <form onSubmit={handleSubmit}>
        <Box mb={2}>
          <TextField label="Test Title" variant="outlined" fullWidth value={testTitle} onChange={(e) => setTestTitle(e.target.value)} required />
        </Box>
        <Box mb={2}>
          <TextField label="Number of Questions" type="number" variant="outlined" fullWidth value={numQuestions} onChange={(e) => setNumQuestions(e.target.value)} required />
        </Box>
        <Button type="submit" variant="contained" color="primary">Configure</Button>
      </form>
    </Box>
  );
}

export default ConfigureTest;

TestDisplay.jsx:
jsx
Copy code
import React, { useState, useEffect } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import testData from '../testData.json';
import Question from './Question';
import { Typography, Button, Box } from '@mui/material';

function TestDisplay() {
  const location = useLocation();
  const navigate = useNavigate();
  const { testTitle, numQuestions } = location.state || {};
  const [questions, setQuestions] = useState([]);
  const [answers, setAnswers] = useState({});

  useEffect(() => {
    if (!testTitle || !numQuestions) {
      navigate('/');
    } else {
      const availableQuestions = testData.questions.slice(0, Math.min(numQuestions, testData.questions.length));
      setQuestions(availableQuestions);
    }
  }, [testTitle, numQuestions, navigate]);

  const handleAnswer = (questionId, answer) => {
    setAnswers((prev) => ({ ...prev, [questionId]: answer }));
  };

  const handleSubmit = () => {
    console.log("Submitted answers:", answers);
    navigate('/result');
  };

  return (
    <Box>
      <Typography variant="h4" gutterBottom>{testTitle}</Typography>
      {questions.map((question, index) => (
        <Box key={index} mb={4}>
          <Question question={question} onAnswer={(answer) => handleAnswer(question.id, answer)} />
        </Box>
      ))}
      <Button variant="contained" color="primary" onClick={handleSubmit}>Submit Test</Button>
    </Box>
  );
}

export default TestDisplay;

Question.jsx:
jsx
Copy code
import React from 'react';
import { Typography, RadioGroup, FormControlLabel, Radio, TextField, Select, MenuItem, FormControl, InputLabel } from '@mui/material';

const Question = ({ question, onAnswer }) => {
  const handleMCQChange = (event) => onAnswer(event.target.value);
  const handleTextChange = (event) => onAnswer(event.target.value);
  const handleTrueFalseChange = (event) => onAnswer(event.target.value === 'true');
  const handleMatchingChange = (leftTerm, event) => onAnswer({ ...question.matchingAnswers, [leftTerm]: event.target.value });

  return (
    <div>
      <Typography variant="h6" gutterBottom>{question.question}</Typography>

      {question.type === 'MCQ' && (
        <RadioGroup onChange={handleMCQChange}>
          {question.options.map((option, index) => (
            <FormControlLabel key={index} value={option.label} control={<Radio />} label={option.text} />
          ))}
        </RadioGroup>
      )}

      {question.type === 'Text' && (
        <TextField variant="outlined" fullWidth multiline rows={4} onChange={handleTextChange} placeholder="Write your answer here..." />
      )}

      {question.type === 'FillInTheBlank' && (
        <TextField variant="outlined" fullWidth onChange={handleTextChange} placeholder="Fill in the blank..." />
      )}

      {question.type === 'Matching' && (
        <div>
          {question.pairs?.map((pair, index) => (
            <FormControl fullWidth key={index} margin="normal">
              <InputLabel>{pair.left}</InputLabel>
              <Select value={question.matchingAnswers?.[pair.left] || ''} label={pair.left} onChange={(event) => handleMatchingChange(pair.left, event)}>
                {pair.rightOptions?.map((option, optIndex) => (
                  <MenuItem key={optIndex} value={option}>{option}</MenuItem>
                ))}
              </Select>
            </FormControl>
          ))}
        </div>
      )}

      {question.type === 'TrueFalse' && (
        <RadioGroup onChange={handleTrueFalseChange}>
          <FormControlLabel value="true" control={<Radio />} label="True" />
          <FormControlLabel value="false" control={<Radio />} label="False" />
        </RadioGroup>
      )}
    </div>
  );
};

export default Question;


4. Mock Data Files
gradedTestData.json: Contains mock data for graded test results with detailed feedback.
testData.json: Contains 20 mock questions with various types including MCQ, Text, Fill-in-the-Blank, True/False, and Matching questions.

5. Major Improvements
UI Alignment Fixes: Implemented Material UI for better alignment and appearance of buttons and inputs.
Test Rendering Fixes: Fixed issues with rendering more than 5 questions by safely slicing the available data and handling undefined properties in the questions.
Improved Question Handling: Enhanced the handling of different question types, especially Matching questions, ensuring the UI doesn’t crash when properties are undefined.

